// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: rental.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RentalService_RentCar_FullMethodName         = "/rental.RentalService/RentCar"
	RentalService_CompleteRental_FullMethodName  = "/rental.RentalService/CompleteRental"
	RentalService_GetRental_FullMethodName       = "/rental.RentalService/GetRental"
	RentalService_ListUserRentals_FullMethodName = "/rental.RentalService/ListUserRentals"
)

// RentalServiceClient is the client API for RentalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RentalServiceClient interface {
	RentCar(ctx context.Context, in *RentCarRequest, opts ...grpc.CallOption) (*RentCarResponse, error)
	CompleteRental(ctx context.Context, in *CompleteRentalRequest, opts ...grpc.CallOption) (*CompleteRentalResponse, error)
	GetRental(ctx context.Context, in *GetRentalRequest, opts ...grpc.CallOption) (*GetRentalResponse, error)
	ListUserRentals(ctx context.Context, in *ListUserRentalsRequest, opts ...grpc.CallOption) (*ListUserRentalsResponse, error)
}

type rentalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRentalServiceClient(cc grpc.ClientConnInterface) RentalServiceClient {
	return &rentalServiceClient{cc}
}

func (c *rentalServiceClient) RentCar(ctx context.Context, in *RentCarRequest, opts ...grpc.CallOption) (*RentCarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RentCarResponse)
	err := c.cc.Invoke(ctx, RentalService_RentCar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentalServiceClient) CompleteRental(ctx context.Context, in *CompleteRentalRequest, opts ...grpc.CallOption) (*CompleteRentalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteRentalResponse)
	err := c.cc.Invoke(ctx, RentalService_CompleteRental_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentalServiceClient) GetRental(ctx context.Context, in *GetRentalRequest, opts ...grpc.CallOption) (*GetRentalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRentalResponse)
	err := c.cc.Invoke(ctx, RentalService_GetRental_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentalServiceClient) ListUserRentals(ctx context.Context, in *ListUserRentalsRequest, opts ...grpc.CallOption) (*ListUserRentalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserRentalsResponse)
	err := c.cc.Invoke(ctx, RentalService_ListUserRentals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RentalServiceServer is the server API for RentalService service.
// All implementations must embed UnimplementedRentalServiceServer
// for forward compatibility.
type RentalServiceServer interface {
	RentCar(context.Context, *RentCarRequest) (*RentCarResponse, error)
	CompleteRental(context.Context, *CompleteRentalRequest) (*CompleteRentalResponse, error)
	GetRental(context.Context, *GetRentalRequest) (*GetRentalResponse, error)
	ListUserRentals(context.Context, *ListUserRentalsRequest) (*ListUserRentalsResponse, error)
	mustEmbedUnimplementedRentalServiceServer()
}

// UnimplementedRentalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRentalServiceServer struct{}

func (UnimplementedRentalServiceServer) RentCar(context.Context, *RentCarRequest) (*RentCarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RentCar not implemented")
}
func (UnimplementedRentalServiceServer) CompleteRental(context.Context, *CompleteRentalRequest) (*CompleteRentalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteRental not implemented")
}
func (UnimplementedRentalServiceServer) GetRental(context.Context, *GetRentalRequest) (*GetRentalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRental not implemented")
}
func (UnimplementedRentalServiceServer) ListUserRentals(context.Context, *ListUserRentalsRequest) (*ListUserRentalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserRentals not implemented")
}
func (UnimplementedRentalServiceServer) mustEmbedUnimplementedRentalServiceServer() {}
func (UnimplementedRentalServiceServer) testEmbeddedByValue()                       {}

// UnsafeRentalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RentalServiceServer will
// result in compilation errors.
type UnsafeRentalServiceServer interface {
	mustEmbedUnimplementedRentalServiceServer()
}

func RegisterRentalServiceServer(s grpc.ServiceRegistrar, srv RentalServiceServer) {
	// If the following call pancis, it indicates UnimplementedRentalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RentalService_ServiceDesc, srv)
}

func _RentalService_RentCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RentCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentalServiceServer).RentCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RentalService_RentCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentalServiceServer).RentCar(ctx, req.(*RentCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentalService_CompleteRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentalServiceServer).CompleteRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RentalService_CompleteRental_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentalServiceServer).CompleteRental(ctx, req.(*CompleteRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentalService_GetRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentalServiceServer).GetRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RentalService_GetRental_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentalServiceServer).GetRental(ctx, req.(*GetRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentalService_ListUserRentals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRentalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentalServiceServer).ListUserRentals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RentalService_ListUserRentals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentalServiceServer).ListUserRentals(ctx, req.(*ListUserRentalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RentalService_ServiceDesc is the grpc.ServiceDesc for RentalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RentalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rental.RentalService",
	HandlerType: (*RentalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RentCar",
			Handler:    _RentalService_RentCar_Handler,
		},
		{
			MethodName: "CompleteRental",
			Handler:    _RentalService_CompleteRental_Handler,
		},
		{
			MethodName: "GetRental",
			Handler:    _RentalService_GetRental_Handler,
		},
		{
			MethodName: "ListUserRentals",
			Handler:    _RentalService_ListUserRentals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rental.proto",
}
